 /*  there are main two type of execution context
1) global execution context
2) functional execution context
another one is a part of global execution context ie eval execution context



suppose there is a  js function writen in control pannel 
 there is following allocated

 1)   Memory creation phase
 2)  execution phase   


 let val1=10
let val2 =5
function addOne(num1,num2){
  let total = num1+num2
  return total
}
let result1 = addOne(val1,val2)
let result2 = addOne(10,2)


(1) first exeute global execution (this)

(2)  secondly execute memory phase
 val1 -> undefined
 val2 -> undefined
 addOne -> definition
 result1 -> undefined
 result2 -> undefined

(3)  Execution phase
val1 <-  10
val2 <-  5
addOne  -> 1) new variable enviroment 
          2) execution thread    
           this two method created at each call of a funcition

          (3.2) memory phase
           val1 -> undefined
           val2 -> undefined
           total -> undefined

           (3.3) execution phase
            val1 <-  10
            val2 <-  5
            total <- 15
       
            delete global execution mode for result 1
result1 <- 15
another call again create a global execution mode
           (3.2) memory phase
              val1 -> undefined
           val2 -> undefined
           total -> undefined

           (3.3) execution phase
            val1 <-  10
            val2 <-  2
            total <- 12

            delete global execution mode for result2
result2 <- 12




**********************call stack**********************

function One(){
  console.log("One")
  Two()
}
function twe(){
  console.log("Two")
  Three()
}
function Three(){
  console.log("Three")
}

One()
Two()
Three()





*/
